Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1506002053000)
+++ pom.xml	(date 1515246084000)
@@ -40,7 +40,7 @@
         <dependency>
             <groupId>org.ow2.asm</groupId>
             <artifactId>asm-all</artifactId>
-            <version>5.1</version>
+            <version>5.2</version>
         </dependency>
         <dependency>
             <groupId>com.fasterxml.jackson.core</groupId>
@@ -73,6 +73,35 @@
 
         <plugins>
             <plugin>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>maven-bundle-plugin</artifactId>
+                <version>3.3.0</version>
+                <extensions>true</extensions>
+                <configuration>
+                    <createDependencyReducedPom>true</createDependencyReducedPom>
+                    <instructions>
+                        <Import-Package>*</Import-Package>
+
+                    </instructions>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>bundle-manifest</id>
+                        <phase>process-classes</phase>
+                        <goals>
+                            <goal>manifest</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <dependencies>
+                    <dependency>
+                        <groupId>biz.aQute.bnd</groupId>
+                        <artifactId>biz.aQute.bndlib</artifactId>
+                        <version>3.5.0</version>
+                    </dependency>
+                </dependencies>
+            </plugin>
+           <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-shade-plugin</artifactId>
                 <version>2.4.3</version>
Index: src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/ProjectAnalyzer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/ProjectAnalyzer.java	(date 1506002053000)
+++ src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/ProjectAnalyzer.java	(date 1515246084000)
@@ -19,6 +19,7 @@
 import com.sebastian_daschner.jaxrs_analyzer.LogProvider;
 import com.sebastian_daschner.jaxrs_analyzer.analysis.bytecode.BytecodeAnalyzer;
 import com.sebastian_daschner.jaxrs_analyzer.analysis.classes.ContextClassReader;
+import com.sebastian_daschner.jaxrs_analyzer.analysis.classes.ExtensibleClassLoader;
 import com.sebastian_daschner.jaxrs_analyzer.analysis.classes.JAXRSClassVisitor;
 import com.sebastian_daschner.jaxrs_analyzer.analysis.javadoc.JavaDocAnalyzer;
 import com.sebastian_daschner.jaxrs_analyzer.analysis.results.ResultInterpreter;
@@ -66,7 +67,7 @@
     private final ResultInterpreter resultInterpreter = new ResultInterpreter();
     private final BytecodeAnalyzer bytecodeAnalyzer = new BytecodeAnalyzer();
     private final JavaDocAnalyzer javaDocAnalyzer = new JavaDocAnalyzer();
-
+    private ExtensibleClassLoader extensibleClassLoader = new ExtensibleClassLoader();
     /**
      * Creates a project analyzer with given class path locations where to search for classes.
      *
@@ -90,7 +91,7 @@
         lock.lock();
         try {
             projectClassPaths.forEach(this::addProjectPath);
-
+            ContextClassReader.setClassLoader(extensibleClassLoader);
             // analyze relevant classes
             final JobRegistry jobRegistry = JobRegistry.getInstance();
             final Set<ClassResult> classResults = new HashSet<>();
@@ -148,7 +149,7 @@
             throw new IllegalArgumentException("The location '" + location + "' does not exist!");
         classPool.add(location);
         try {
-            ContextClassReader.addClassPath(location.toUri().toURL());
+            extensibleClassLoader.addURL(location.toUri().toURL());
         } catch (Exception e) {
             throw new IllegalArgumentException("The location '" + location + "' could not be loaded to the class path!", e);
         }
Index: src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/bytecode/MethodContentAnalyzer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/bytecode/MethodContentAnalyzer.java	(date 1506002053000)
+++ src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/bytecode/MethodContentAnalyzer.java	(date 1515246084000)
@@ -123,7 +123,8 @@
             classReader.accept(visitor, ClassReader.EXPAND_FRAMES);
             return methodResult;
         } catch (IOException e) {
-            LogProvider.error("Could not analyze project method " + identifier.getContainingClass() + "#" + identifier.getMethodName());
+            LogProvider.error("Could not analyze project method " + identifier.getContainingClass() + "#" +
+                    identifier.getMethodName() + ", " + e.toString());
             LogProvider.debug(e);
             return null;
         }
Index: src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/bytecode/collection/InstructionBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/bytecode/collection/InstructionBuilder.java	(date 1506002053000)
+++ src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/bytecode/collection/InstructionBuilder.java	(date 1515246084000)
@@ -1,6 +1,7 @@
 package com.sebastian_daschner.jaxrs_analyzer.analysis.bytecode.collection;
 
 import com.sebastian_daschner.jaxrs_analyzer.LogProvider;
+import com.sebastian_daschner.jaxrs_analyzer.analysis.classes.ContextClassReader;
 import com.sebastian_daschner.jaxrs_analyzer.model.instructions.*;
 import com.sebastian_daschner.jaxrs_analyzer.model.methods.MethodIdentifier;
 import org.objectweb.asm.Handle;
@@ -290,11 +291,12 @@
     private static Object getStaticValue(String name, String containingClass) {
         final Field field;
         try {
-            field = Class.forName(containingClass.replace('/', '.')).getDeclaredField(name);
+            field = ContextClassReader.getClassLoader().loadClass(containingClass.replace('/', '.'))
+                    .getDeclaredField(name);
             field.setAccessible(true);
             return field.get(null);
         } catch (Exception e) {
-            LogProvider.error("Could not access static property, reason: " + e.getMessage());
+            LogProvider.error("Could not access static property, reason: " + e.getMessage() + ", " + e.toString());
             LogProvider.debug(e);
             return null;
         }
Index: src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/classes/ContextClassReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/classes/ContextClassReader.java	(date 1506002053000)
+++ src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/classes/ContextClassReader.java	(date 1515246084000)
@@ -4,7 +4,6 @@
 
 import java.io.IOException;
 import java.net.URL;
-import java.net.URLClassLoader;
 
 /**
  * A {@link ClassReader} that is able to use a separate {@link ClassLoader}.
@@ -13,7 +12,7 @@
  */
 public class ContextClassReader extends ClassReader {
 
-    private static final ExtensibleClassLoader CLASS_LOADER = new ExtensibleClassLoader();
+    public static ClassLoader CLASS_LOADER = new ExtensibleClassLoader();
 
     public ContextClassReader(final String className) throws IOException {
         super(CLASS_LOADER.getResourceAsStream(className.replace('.', '/') + ".class"));
@@ -24,21 +23,7 @@
         return CLASS_LOADER;
     }
 
-    public static void addClassPath(final URL url) {
-        CLASS_LOADER.addURL(url);
+    public static void setClassLoader(ClassLoader classLoader) {
+        CLASS_LOADER = classLoader;
     }
-
-    private static class ExtensibleClassLoader extends URLClassLoader {
-
-        ExtensibleClassLoader() {
-            super(new URL[]{});
-        }
-
-        @Override
-        public void addURL(final URL url) {
-            super.addURL(url);
-        }
-
-    }
-
 }
Index: src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/classes/ExtensibleClassLoader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/classes/ExtensibleClassLoader.java	(date 1515246084000)
+++ src/main/java/com/sebastian_daschner/jaxrs_analyzer/analysis/classes/ExtensibleClassLoader.java	(date 1515246084000)
@@ -0,0 +1,20 @@
+package com.sebastian_daschner.jaxrs_analyzer.analysis.classes;
+
+import java.net.URL;
+import java.net.URLClassLoader;
+
+/**
+ * Created on 12/7/2017.
+ */
+public class ExtensibleClassLoader extends URLClassLoader {
+
+    public ExtensibleClassLoader() {
+        super(new URL[]{});
+    }
+
+    @Override
+    public void addURL(final URL url) {
+        super.addURL(url);
+    }
+
+}
Index: src/main/java/com/sebastian_daschner/jaxrs_analyzer/model/JavaUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/sebastian_daschner/jaxrs_analyzer/model/JavaUtils.java	(date 1506002053000)
+++ src/main/java/com/sebastian_daschner/jaxrs_analyzer/model/JavaUtils.java	(date 1515246084000)
@@ -375,8 +375,8 @@
         ClassLoader classLoader = ContextClassReader.getClassLoader();
         try {
             return classLoader.loadClass(className.replace('/', '.'));
-        } catch (ClassNotFoundException e) {
-            LogProvider.error("Could not load class " + className);
+        } catch (ClassNotFoundException | NoClassDefFoundError e) {
+            LogProvider.error("Could not load class " + className + ": " + e.toString());
             LogProvider.debug(e);
             return null;
         }
@@ -395,12 +395,18 @@
     }
 
     public static Method findMethod(final Class<?> loadedClass, final String methodName, final String signature) {
-        final List<String> parameters = getParameters(signature);
-        return Stream.of(loadedClass.getDeclaredMethods()).filter(m -> m.getName().equals(methodName)
-                && m.getParameterCount() == parameters.size()
-                // return types are not taken into account (could be overloaded method w/ different return type)
-                && Objects.equals(getParameters(getMethodSignature(m)), parameters)
-        ).findAny().orElse(null);
+        try {
+            final List<String> parameters = getParameters(signature);
+            return Stream.of(loadedClass.getDeclaredMethods()).filter(m -> m.getName().equals(methodName)
+                    && m.getParameterCount() == parameters.size()
+                    // return types are not taken into account (could be overloaded method w/ different return type)
+                    && Objects.equals(getParameters(getMethodSignature(m)), parameters)
+            ).findAny().orElse(null);
+        } catch (NoClassDefFoundError e) {
+            LogProvider.error("Could not load method " + methodName + ": " + e.toString());
+            LogProvider.debug(e);
+            return null;
+        }
     }
 
     public static String getMethodSignature(final String returnType, final String... parameterTypes) {
